}
####
#### ...we select word1 and definitions (from composition of definition words) for it
data_sim_w1 <- subset(data, select = c(w1, w1_vectorized, def1_vector_sum
#, def1_vector_avg
))
#length(data_sim_w1[1, , ]$def1_vector_sum)
colnames(data_sim_w1) <- c("w", "vec_w", "vec_composed")
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#print(paste0(iter_on_words, " - ", word, " - ", vec_word[1]))
})
iter_on_words
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
matrix_sim
iter_on_words <- 2
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
matrix_sim
iter_on_words <- 3
word = data_sim_w1$w[iter_on_words]
word
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
vec_word
word
vec_word
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
matrix_sim
iter_on_words <- 4
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#print(paste0(iter_on_words, " - ", word, " - ", vec_word[1]))
})
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
print(paste0("definition ", iter_on_words), " computed")
})
sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
print(paste0("definition ", iter_on_words, " computed"))
})
matrix_sim
sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
matrix_sim <- rbindlist(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
print(paste0("definition ", iter_on_words, " computed"))
})
matrix_sim
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
matrix_sim <- rbind(matrix_sim, c(word, vec_word_vs_composed))
print(paste0("definition ", iter_on_words, " computed"))
})
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
matrix_sim <- rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
})
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
sapply(1:3
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
})
rbind(matrix_sim, sapply(1:3
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
return(c(word, vec_word_vs_composed))
})
)
####
#### define an empty datatable
matrix_sim <- data.table(matrix(nrow = 0, ncol = (length(data_sim_w1$w) + 1)))
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
rbind(matrix_sim, sapply(1:3
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
return(c(word, vec_word_vs_composed))
})
)
do.call("rbind", sapply(1:3
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
return(c(word, vec_word_vs_composed))
})
)
do.call("rbind", sapply(1:3
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
return(list(c(word, vec_word_vs_composed)))
})
)
matrix_sim_data <- do.call("rbind", sapply(1:3 # length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
return(list(c(word, vec_word_vs_composed)))
})
)
matrix_sim_data
setDT(matrix_sim_data)
matrix_sim_data <- as.data.table(matrix_sim_data)
matrix_sim_data
matrix_sim <- do.call("rbind", sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
return(list(c(word, vec_word_vs_composed)))
})
)
#fwrite(matrix_sim, file = "")
saveRDS(matrix_sim, FILE_W1_SIM)
FILE_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
#fwrite(matrix_sim, file = "")
saveRDS(matrix_sim, FILE_W1_SIM)
library("data.table")
FILE_RDS_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
library("data.table")
FILE_RDS_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
sim <- readRDS(FILE_W1_SIM)
FILE_RDS_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
sim <- readRDS(FILE_RDS_W1_SIM)
head(sim)
library("reticulate")
library("data.table")
FILE_PY_READ_PICKLE <- "C:/sc-sync/projects/proj-nlp/app/service/util/read_pickle.py"
FILE_PXL_TO_READ <- "C:/sc-sync/projects/proj-nlp/data/output/combined-definitions-complete"
FILE_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
#### read dataframe from .pkl file
source_python(FILE_PY_READ_PICKLE)
pickle_data <- read_pickle_file(FILE_PXL_TO_READ)
data <- setDT(pickle_data)
rm(pickle_data)
compute_similarity_cosin_between_vectors <- function(v1, v2, str1 = 'word1', str2 = 'def'){
sim <- tryCatch(
{
# num <- v1*v2, but we test sapply function
num <- sum(sapply(1:length(v2), function(i) { v1[i]*v2[i] }))
den1 <- sqrt( sum(sapply(1:length(v2), function(i) { v1[i]*v1[i] })) )
den2 <- sqrt( sum(sapply(1:length(v2), function(i) { v2[i]*v2[i] })) )
return (num/(den1*den2))
},
error=function(e) {
message(paste0("ERROR"))
# Choose a return value in case of error
return(NA)
},
#warning=function(cond) {
#
#},
finally={
#message(paste0("Computed similariry between '", str1, "' - '", str2))
}
)
return(round(as.numeric(sim), 4))
}
####
#### ...we select word1 and definitions (from composition of definition words) for it
data_sim_w1 <- subset(data, select = c(w1, w1_vectorized, def1_vector_sum
#, def1_vector_avg
))
#length(data_sim_w1[1, , ]$def1_vector_sum)
colnames(data_sim_w1) <- c("w", "vec_w", "vec_composed")
####
#### compute similarities matrix
matrix_sim <- do.call("rbind", sapply(1:length(data_sim_w1$w)
, function(iter_on_words) {
word = data_sim_w1$w[iter_on_words]
# vector associated to one only word
vec_word <- unlist(data_sim_w1[ iter_on_words, .(vec_w), ][[1]])
# ...we compute similarity between a word an a set of composition-vectors
vec_word_vs_composed <- sapply(1:length(data_sim_w1$vec_composed)
, function(i_def){
vec_def <- unlist(data_sim_w1[ i_def, .(vec_composed), ][["vec_composed"]])
return (compute_similarity_cosin_between_vectors(vec_word, vec_def))
})
#aux_dt <- as.data.table(c(word, vec_word_vs_composed))
#matrix_sim <- rbind(matrix_sim, as.list(as.matrix(c(word, vec_word_vs_composed), nrow = 1, ncol = length(data_sim_w1$w) + 1)))
#rbind(list(matrix_sim, list(c(word, vec_word_vs_composed))))
print(paste0("definition ", iter_on_words, " computed"))
return(list(c(word, vec_word_vs_composed)))
})
)
matrix_sim <- as.data.table(matrix_sim)
colnames(matrix_sim) <- c("word", sapply(1:length(data_sim_w1$w), function(i_def){paste0("comp_", data_sim_w1$w[i_def])}))
#fwrite(matrix_sim, file = "")
saveRDS(matrix_sim, FILE_W1_SIM)
sim <- readRDS(FILE_RDS_W1_SIM)
FILE_RDS_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
sim <- readRDS(FILE_RDS_W1_SIM)
head(sim)
####
#### ...we select word1 and definitions (from composition of definition words) for it
data_sim_w1 <- subset(data, select = c(w1, w1_vectorized, def1_vector_sum
#, def1_vector_avg
))
#length(data_sim_w1[1, , ]$def1_vector_sum)
colnames(data_sim_w1) <- c("w", "vec_w", "vec_composed")
data_sim_w1 <- unique(data_sim_w1)
data_sim_w1 <- data_sim_w1[unique(data_sim_w1)]
class(data_sim_w1)
unique(data_sim_w1)
unique(data_sim_w1)
data_sim_w1[unique(data_sim_w1)]
####
#### ...we select word1 and definitions (from composition of definition words) for it
data_sim_w1 <- subset(data, select = c(w1, w1_vectorized, def1_vector_sum
#, def1_vector_avg
))
#length(data_sim_w1[1, , ]$def1_vector_sum)
colnames(data_sim_w1) <- c("w", "vec_w", "vec_composed")
unique(data_sim_w1)
library("data.table")
FILE_RDS_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
sim <- readRDS(FILE_RDS_W1_SIM)
head(sim)
library("data.table")
FILE_RDS_W1_SIM <- "C:/sc-sync/projects/proj-nlp/data/output/w1_sim.rds"
sim <- readRDS(FILE_RDS_W1_SIM)
head(sim)
unique(sim)
dim(sim)
unique(sim$word)
dim(unique(sim))
sim_unique <- unique(sim)
sim_unique
sort(sim[1, ])
ranking <- sort(subset(sim[1, ], select = -c(word)))
ranking
ranking <- sort(subset(sim[1, ], select = -c(word)), decreasing = TRUE)
ranking <- sort(subset(sim[1, ], select = -c(word)), decreasing = TRUE)
ranking
ranking <- sort(subset(sim[1, 1:5], select = -c(word)), decreasing = TRUE)
ranking <- sort(subset(sim[1, 1:5], select = -c(word)), decreasing = TRUE)
ranking
ranking <- colnames(sort(subset(sim[1, 1:5], select = -c(word)), decreasing = TRUE))
ranking
####
#### ...we get the unique rows (some words are repeated)
sim_unique <- unique(sim)[ , unique(colnames(sim))]
sim_unique
ranking <- colnames(sort(subset(sim[1, 1:5], select = -c(word)), decreasing = TRUE))
ranking
####
#### ...we get the unique rows (some words are repeated)
sim_unique <- unique(sim)[ , unique(colnames(sim))]
ranking <- colnames(sort(subset(sim_unique[1, 1:5], select = -c(word)), decreasing = TRUE))
ranking
unique(colnames(sim))
unique(sim)[ , unique(colnames(sim)), ]
####
#### ...we get the unique rows (some words are repeated)
sim_unique <- unique(sim)[ , unique(colnames(sim)), with = FALSE]
sim_unique
ranking <- colnames(sort(subset(sim_unique[1, 1:5], select = -c(word)), decreasing = TRUE))
ranking
apply( sim_unique[1:5, ], 1, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE)})
ranking <- apply( sim_unique[1:5, ], 1, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))})
apply(1:5, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))})
sapply(1:5, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))})
iter_rows = 1
colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))
vapply(1:5, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))})
vapply(1:5, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))}, numeric)
sapply(1:5, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))})
ranking <- t(sapply(1:5, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))}))
ranking
ranking <- t(sapply(1:length(sim_unique$word), function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:5], select = -c(word)), decreasing = TRUE))}))
ranking
ranking <- t(sapply(1:length(sim_unique$word), function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE))}))
ranking
ranking <- sapply(1:length(sim_unique$word), function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE))})
ranking
sapply(1:7, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE))})
colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE))
sapply(1:3, function(iter_rows){colnames(sort(subset(sim_unique[iter_rows, 1:10], select = -c(word)), decreasing = TRUE))})
colnames(sort(subset(sim_unique[iter_rows, 1:10], select = -c(word)), decreasing = TRUE))
sapply(1:3, function(iter_rows){c(colnames(sort(subset(sim_unique[iter_rows, 1:10], select = -c(word)), decreasing = TRUE)))})
sapply(1:3, function(iter_rows){c(colnames(sort(subset(sim_unique[iter_rows, 1:10], select = -c(word)), decreasing = TRUE)))})
sapply(1:3, function(iter_rows){c(colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE)))})
subset(sim_unique[iter_rows, ], select = -c(word)
)
sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE)
sapply(1:3, function(iter_rows){c(colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE))[1:5])})
sapply(1:10, function(iter_rows){c(colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE))[1:5])})
colnames(sort(subset(sim_unique[iter_rows, ], select = -c(word)), decreasing = TRUE))[1:5]
